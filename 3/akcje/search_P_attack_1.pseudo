search_p_attack()
{
    calculate expected future positions xLh, xRh,on A
    if(Gui:Lh & CzyZaplanowanoZdarenie(t_Move_Lh))//Lh zaplanowanoZdarenie
    {
        if(Gui:Rh & CzyZaplanowanoZdarenie(t_Move_Rh))//sytuacja 1:11a/17
        {
            if(Lh_curr_position=tier0)
            {
                xLh=x in L/RT przez który przechodzi prosta łącząca (y=0:tier0) z (z=UAV1_curr_position:tier1)
                    +random(0,Lh_beating_deviation_A)

            }else{//Lh jest na L/RT
                xLh=Lh_expected_position(TabZdarzen(typ_zdarzenia=Move_Lh))+random(0,Lh_beating_deviation_A)

            }
            goto 1
        }else //sytuacja 2:11a/17
        {
            if(Lh_curr_position=tier0)
            {
                goto 2
            }
            2:
            if (Rh_curr_position=tier0) {
                
            }
            goto 1
            
        }
    }
    if( GUI:UAV1 & GUI:UAV2)
    {
        calculate expected future positions of xLh,xRh
        //sytuacja 3
    }
    1:
    calculate dt_Lh
    calculate dt_Rh

    calculate a1,a2,b1,b2,c1,c2
    set gred points
    Flooding Algo(starting_point(xl),set_of_paths(path:ordered_set_points,num_of_path_points,found_goals(x_goal,y_goal),time_requested,score))
    Select_paths with time_requested<=0.5*Min(dt_Lh,dt_Rh)
    Select_optimal_path(path:ordered_set_points,(x_goal,y_goal),time_requested,score)
    if (path_selected found)
    {
        path_exists=True
        
    }else{
        path_exists=False

    }
}